from pip._vendor.distlib.compat import raw_input
from pip._vendor.idna import unichr

try:
   input = raw_input
except NameError:
   pass
try:
   chr = unichr
except NameError:
   pass
p1=int(input('Enter prime number1: '))
p2=int(input('Enter prime number2: '))
print("Choosen primes:\np1=" + str(p1) + ", p2=" + str(p2))
print("\n")
n=p1*p2
print("n = p1 * p2 = " + str(n) )
print("\n")
phi=(p1-1)*(p2-1)
print("Euler's function (totient) [phi(n)]: " + str(phi))
print("\n")

def gcd(a, b):
    while b != 0:
        c = a % b
        a = b
        b = c
    return a
def modinv(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None
def coprimes(a):
    l = []
    for x in range(2, a):
        if gcd(a, x) == 1 and modinv(x,phi) != None:
            l.append(x)
    for x in l:
        if x == modinv(x,phi):
            l.remove(x)
    return l
print("Choose from array:\n")
print(str(coprimes(phi)) )
print("\n")
e=int(input())
d=modinv(e,phi)
print("public key is (e=" + str(e) + ", n=" + str(n))
print("\n")
print("private key is (d=" + str(d) + ", n=" + str(n))
print("\n")
def encrypt_block(m):
c = modinv(me, n)
if c == None: print('No multiplicative inverse ' + str(m) + '.')
return c
def decrypt_block(c):
m = modinv(cd, n)
if m == None: print('No multiplicative inverse ' + str(c) + '.')
return m
def encrypt_string(s):
return ''.join([chr(encrypt_block(ord(x))) for x in list(s)])
def decrypt_string(s):
return ''.join([chr(decrypt_block(ord(x))) for x in list(s)])
s = input("Enter a message to encrypt: ")
print("Plain message: " + s  )
print("\n")
enc = encrypt_string(s)
print("Encrypted message: "+ enc )
print("\n")
dec = decrypt_string(enc)
print("Decrypted message: " + dec )
